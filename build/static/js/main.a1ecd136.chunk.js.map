{"version":3,"sources":["services/localStorageHandler.js","services/reducer.js","services/Store.jsx","components/ContactForm.jsx","components/ContactList.jsx","components/Filter.jsx","index.js","components/App.jsx"],"names":["key","value","localStorage","setItem","JSON","stringify","err","console","log","yourContacts","getItem","parse","contactsReducer","state","action","type","payload","contact","filter","id","contactId","Context","createContext","Store","children","useReducer","reducer","localStorageHandler","contacts","dispatch","Provider","uuidv4","require","ContactForm","useContext","useState","name","setName","number","setNumber","onSubmit","e","preventDefault","find","isUniqueName","alert","addContact","onChange","target","ContactList","useEffect","filteredContacts","useMemo","toLowerCase","includes","toLocaleLowerCase","length","map","onClick","Filter","changeFilter","ReactDOM","render","setFilter","document","getElementById"],"mappings":"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","file":"static/js/main.a1ecd136.chunk.js","sourcesContent":["const save = (key, value) => {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nconst get = key => {\r\n  try {\r\n    const yourContacts = localStorage.getItem(key);\r\n    return yourContacts ? JSON.parse(yourContacts) : null;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default {\r\n  save,\r\n  get\r\n};\r\n","const contactsReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"addContact\":\r\n      return [...state, action.payload.contact];\r\n    case \"removeContact\":\r\n      return state.filter(contact => contact.id !== action.payload.contactId);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default contactsReducer;\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport localStorageHandler from \"../services/localStorageHandler\";\r\nimport reducer from \"./reducer\";\r\n\r\nconst Store = ({ children }) => {\r\n  const [contacts, dispatch] = useReducer(\r\n    reducer,\r\n    localStorageHandler.get(\"yourContacts\") || []\r\n  );\r\n\r\n  return (\r\n    <Context.Provider value={[contacts, dispatch]}>{children}</Context.Provider>\r\n  );\r\n};\r\n\r\nexport const Context = createContext();\r\nexport default Store;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Context } from \"../services/Store\";\r\nconst uuidv4 = require(\"uuid/v4\");\r\n\r\nexport default function ContactForm() {\r\n  const [contacts, dispatch] = useContext(Context);\r\n\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const changeName = e => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const changeNumber = e => {\r\n    setNumber(e.target.value);\r\n  };\r\n\r\n  const isUniqueName = name => !contacts.find(contact => contact.name === name);\r\n\r\n  const addContact = () => {\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name: name,\r\n      number: number\r\n    };\r\n\r\n    dispatch({ type: \"addContact\", payload: { contact } });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (!(name && number)) return;\r\n\r\n    if (!isUniqueName(name)) {\r\n      alert(`${name} is already in contacts.`);\r\n      return;\r\n    }\r\n\r\n    addContact();\r\n\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        Name\r\n        <input type=\"text\" value={name} onChange={changeName} />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input type=\"number\" value={number} onChange={changeNumber} />\r\n      </label>\r\n\r\n      <button type=\"submit\">Add Contact</button>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useMemo, useContext, useEffect } from \"react\";\r\nimport localStorageHandler from \"../services/localStorageHandler\";\r\nimport { Context } from \"../services/Store\";\r\n\r\nexport default function ContactList({ filter }) {\r\n  const [contacts, dispatch] = useContext(Context);\r\n\r\n  useEffect(() => {\r\n    localStorageHandler.save(\"yourContacts\", contacts);\r\n  }, [contacts]);\r\n\r\n  const filteredContacts = useMemo(\r\n    () =>\r\n      contacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(filter.toLocaleLowerCase())\r\n      ),\r\n    [contacts, filter]\r\n  );\r\n\r\n  const removeContact = contactId => {\r\n    dispatch({ type: \"removeContact\", payload: { contactId } });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {filteredContacts.length !== 0 && (\r\n        <ul>\r\n          {filteredContacts.map(contact => (\r\n            <li key={contact.id}>\r\n              <span>{contact.name} </span>\r\n              <span>{contact.number}</span>\r\n              <button onClick={() => removeContact(contact.id)}>DELETE</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Filter({ filter, changeFilter }) {\r\n  return <input type=\"text\" value={filter} onChange={changeFilter} />;\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","import React, { useState } from \"react\";\nimport ContactForm from \"./ContactForm\";\nimport ContactList from \"./ContactList\";\nimport Filter from \"./Filter\";\nimport Store from \"../services/Store\";\n\nexport default function App() {\n  const [filter, setFilter] = useState(\"\");\n\n  const changeFilter = e => {\n    setFilter(e.target.value);\n  };\n\n  return (\n    <Store>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter filter={filter} changeFilter={changeFilter} />\n      <ContactList filter={filter} />\n    </Store>\n  );\n}\n"],"sourceRoot":""}